// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HoodVisible should render the buttons 1`] = `
<Component
  hideAll={[Function]}
  showAll={[Function]}
>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-csuQGl",
            "isStatic": true,
            "lastClassName": "gejFaP",
            "rules": Array [
              "
  display: flex;
  margin-left: 0;
  position: relative;
  height: 100%;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-csuQGl",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="gejFaP"
      >
        <Styled(styled.button)>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-eNQAEJ",
                  "isStatic": true,
                  "lastClassName": "bmXkwR",
                  "rules": Array [
                    "
  cursor: pointer;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 0.4rem;
  margin: 0 0.4rem;
  background: inherit;
  color: inherit;
  border: none;
  font: inherit;
  cursor: pointer;
  outline: inherit;

  :hover:enabled {
    background-color: ",
                    "rgba(255, 255, 255, 0.25)",
                    ";
  }

  :disabled {
    color: ",
                    "#ccc",
                    ";
  }
",
                    "
  font-size: ",
                    "0.8rem",
                    ";
",
                  ],
                },
                "displayName": "Styled(styled.button)",
                "foldedComponentIds": Array [
                  "sc-jKJlTe",
                ],
                "render": [Function],
                "styledComponentId": "sc-eNQAEJ",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <button
              className="bmXkwR"
            >
              Show Current Hoods
            </button>
          </StyledComponent>
        </Styled(styled.button)>
        <Styled(styled.button)
          onClick={[Function]}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-eNQAEJ",
                  "isStatic": true,
                  "lastClassName": "bmXkwR",
                  "rules": Array [
                    "
  cursor: pointer;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 0.4rem;
  margin: 0 0.4rem;
  background: inherit;
  color: inherit;
  border: none;
  font: inherit;
  cursor: pointer;
  outline: inherit;

  :hover:enabled {
    background-color: ",
                    "rgba(255, 255, 255, 0.25)",
                    ";
  }

  :disabled {
    color: ",
                    "#ccc",
                    ";
  }
",
                    "
  font-size: ",
                    "0.8rem",
                    ";
",
                  ],
                },
                "displayName": "Styled(styled.button)",
                "foldedComponentIds": Array [
                  "sc-jKJlTe",
                ],
                "render": [Function],
                "styledComponentId": "sc-eNQAEJ",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[Function]}
          >
            <button
              className="bmXkwR"
              onClick={[Function]}
            >
              Show All Hoods
            </button>
          </StyledComponent>
        </Styled(styled.button)>
        <Styled(styled.button)
          onClick={[Function]}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-eNQAEJ",
                  "isStatic": true,
                  "lastClassName": "bmXkwR",
                  "rules": Array [
                    "
  cursor: pointer;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 0.4rem;
  margin: 0 0.4rem;
  background: inherit;
  color: inherit;
  border: none;
  font: inherit;
  cursor: pointer;
  outline: inherit;

  :hover:enabled {
    background-color: ",
                    "rgba(255, 255, 255, 0.25)",
                    ";
  }

  :disabled {
    color: ",
                    "#ccc",
                    ";
  }
",
                    "
  font-size: ",
                    "0.8rem",
                    ";
",
                  ],
                },
                "displayName": "Styled(styled.button)",
                "foldedComponentIds": Array [
                  "sc-jKJlTe",
                ],
                "render": [Function],
                "styledComponentId": "sc-eNQAEJ",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[Function]}
          >
            <button
              className="bmXkwR"
              onClick={[Function]}
            >
              Hide All Hoods
            </button>
          </StyledComponent>
        </Styled(styled.button)>
      </div>
    </StyledComponent>
  </styled.div>
</Component>
`;
